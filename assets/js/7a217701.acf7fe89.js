"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6711],{55317:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>k,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=t(87462),s=(t(67294),t(3905)),o=t(50214);t(58764);const r={title:"Snackbar"},c=void 0,i={unversionedId:"components/Snackbar",id:"components/Snackbar",title:"Snackbar",description:"Snackbars provide brief feedback about an operation through a message at the bottom of the screen.",source:"@site/docs/components/Snackbar.mdx",sourceDirName:"components",slug:"/components/Snackbar",permalink:"/react-native-paper/docs/components/Snackbar",draft:!1,editUrl:"https://github.com/callstack/react-native-paper/tree/main/src/components/Snackbar.tsx",tags:[],version:"current",frontMatter:{title:"Snackbar"},sidebar:"components",previous:{title:"SegmentedButtons",permalink:"/react-native-paper/docs/components/SegmentedButtons/"},next:{title:"Surface",permalink:"/react-native-paper/docs/components/Surface"}},l={},p=[{value:"Usage",id:"usage",level:2},{value:"Props",id:"props",level:2}],m={toc:p};function k(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Snackbars provide brief feedback about an operation through a message at the bottom of the screen.\nSnackbar by default uses ",(0,s.kt)("inlineCode",{parentName:"p"},"onSurface")," color from theme."),(0,s.kt)("div",{class:"screenshots"},(0,s.kt)("img",{class:"small",src:"/react-native-paper/screenshots/snackbar.gif"})),(0,s.kt)("h2",{id:"usage"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button, Snackbar } from 'react-native-paper';\n\nconst MyComponent = () => {\n  const [visible, setVisible] = React.useState(false);\n\n  const onToggleSnackBar = () => setVisible(!visible);\n\n  const onDismissSnackBar = () => setVisible(false);\n\n  return (\n    <View style={styles.container}>\n      <Button onPress={onToggleSnackBar}>{visible ? 'Hide' : 'Show'}</Button>\n      <Snackbar\n        visible={visible}\n        onDismiss={onDismissSnackBar}\n        action={{\n          label: 'Undo',\n          onPress: () => {\n            // Do something\n          },\n        }}>\n        Hey there! I'm a Snackbar.\n      </Snackbar>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'space-between',\n  },\n});\n\nexport default MyComponent;\n")),(0,s.kt)("span",null),(0,s.kt)("h2",{id:"props"},"Props"),(0,s.kt)(o.Z,{link:"Snackbar",mdxType:"PropTable"}),(0,s.kt)("p",null,"null"))}k.isMDXComponent=!0}}]);