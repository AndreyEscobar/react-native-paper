"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6711],{55317:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>k,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var a=t(87462),o=(t(67294),t(3905)),r=t(50214),s=t(58764);const i={title:"Snackbar"},c=void 0,l={unversionedId:"components/Snackbar",id:"components/Snackbar",title:"Snackbar",description:"Snackbars provide brief feedback about an operation through a message rendered at the bottom of the container in which it's wrapped.",source:"@site/docs/components/Snackbar.mdx",sourceDirName:"components",slug:"/components/Snackbar",permalink:"/react-native-paper/docs/components/Snackbar",draft:!1,editUrl:"https://github.com/callstack/react-native-paper/tree/main/src/components/Snackbar.tsx",tags:[],version:"current",frontMatter:{title:"Snackbar"},sidebar:"components",previous:{title:"SegmentedButtons",permalink:"/react-native-paper/docs/components/SegmentedButtons/"},next:{title:"Surface",permalink:"/react-native-paper/docs/components/Surface"}},p={},m=[{value:"Usage",id:"usage",level:2},{value:"More Examples",id:"more-examples",level:2},{value:"Props",id:"props",level:2},{value:"Theme colors",id:"theme-colors",level:2}],d={toc:m};function k(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Snackbars provide brief feedback about an operation through a message rendered at the bottom of the container in which it's wrapped."),(0,o.kt)("p",null,"Note: To display it as a popup, regardless of the parent's position, wrap it with a ",(0,o.kt)("inlineCode",{parentName:"p"},"Portal"),' component \u2013 refer to the example in the "More Examples` section.'),(0,o.kt)("div",{class:"screenshots"},(0,o.kt)("img",{class:"small",src:"/react-native-paper/screenshots/snackbar.gif"})),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button, Snackbar } from 'react-native-paper';\n\nconst MyComponent = () => {\n  const [visible, setVisible] = React.useState(false);\n\n  const onToggleSnackBar = () => setVisible(!visible);\n\n  const onDismissSnackBar = () => setVisible(false);\n\n  return (\n    <View style={styles.container}>\n      <Button onPress={onToggleSnackBar}>{visible ? 'Hide' : 'Show'}</Button>\n      <Snackbar\n        visible={visible}\n        onDismiss={onDismissSnackBar}\n        action={{\n          label: 'Undo',\n          onPress: () => {\n            // Do something\n          },\n        }}>\n        Hey there! I'm a Snackbar.\n      </Snackbar>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'space-between',\n  },\n});\n\nexport default MyComponent;\n")),(0,o.kt)("h2",{id:"more-examples"},"More Examples"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Toggle to grab more examples"),(0,o.kt)("ul",null,(0,o.kt)("li",{key:"Snackbar rendered regardless of the parent positioning"},(0,o.kt)("a",{href:"https://snack.expo.dev/@react-native-paper/more-examples---snackbar-rendered-regardless-of-the-parent-positioning"},"Snackbar rendered regardless of the parent positioning")))),(0,o.kt)("h2",{id:"props"},"Props"),(0,o.kt)(r.Z,{link:"Snackbar",mdxType:"PropTable"}),(0,o.kt)("h2",{id:"theme-colors"},"Theme colors"),(0,o.kt)(s.Z,{data:{"-":{iconColor:"theme.colors.inverseOnSurface"}},componentName:"Snackbar",mdxType:"ThemeColorsTable"}))}k.isMDXComponent=!0}}]);